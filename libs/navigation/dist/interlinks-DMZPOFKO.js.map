{
  "version": 3,
  "sources": ["../../features/interlinks.js"],
  "sourcesContent": ["/**\n * Checks if a given match intersects with an existing match\n * before adding it to the list of matches. In case of an\n * intersection, the more specific (i.e. longer) match wins.\n * @param {array} matches The existing matches\n * @param {object} contender The match to check and add\n * @param {number} maxMatches The maximum number of matches\n */\nexport function checkAndAddMatch(matches, contender, maxMatches) {\n  const collisions = matches\n    // check for intersections\n    .filter((match) => !(contender.end < match.start || contender.start > match.end));\n  if (collisions.length === 0 && matches.length < maxMatches) {\n    // no intersecting existing matches, add contender if max not yet reached\n    matches.push(contender);\n  }\n}\n\n/**\n * Loops through a list of keywords and looks for matches in the article text.\n * The first occurrence of each keyword will be replaced with a link and tracking added.\n * The keywords file must have a column titled \"Keyword\".\n * @param {string} path The location of the keywords file to be used for interlinks.\n * @param {number} limit The maximum amount of keywords to fetch from the file.  Default is 1000.\n */\nexport default async function interlink(path, language, limit = 1000) {\n  const isExceptionLanguage = ['zh', 'ko', 'ja', 'th', 'he'].includes(language);\n  const articleBody = document.querySelector('main');\n  const resp = await fetch(`${path}?limit=${limit}`);\n  if (!(articleBody && resp.ok)) return;\n  const json = await resp.json();\n  const articleText = articleBody.textContent.toLowerCase();\n  // set article link limit: 1 every 100 words\n  const articleLinks = articleBody.querySelectorAll('a').length;\n  const articleWords = articleText.split(/\\s/).length;\n  const maxLinks = (Math.floor(articleWords / 100)) - articleLinks;\n  // eslint-disable-next-line no-useless-return\n  if (maxLinks <= 0) return;\n  const wordBorder = isExceptionLanguage ? '' : '\\\\b';\n  const keywords = (Array.isArray(json) ? json : json.data)\n    // scan article to filter keywords down to relevant ones\n    .filter(({ Keyword }) => articleText.indexOf(Keyword.toLowerCase()) !== -1)\n    // sort matches by length descending\n    .sort((a, b) => b.Keyword.length - a.Keyword.length)\n    // prepare regexps\n    .map((item) => ({\n      regexp: new RegExp(`${wordBorder}(${item.Keyword.replace(/[/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')})${wordBorder}`, 'iu'),\n      ...item,\n    }));\n  // eslint-disable-next-line no-useless-return\n  if (keywords.length === 0) return;\n  // find exact text node matches and insert links\n  articleBody\n    .querySelectorAll('div > p:not([class])')\n    .forEach((p) => {\n      // set paragraph link limit: 1 every 40 words\n      const paraLinks = p.querySelectorAll('a').length;\n      const paraWords = p.textContent.split(/\\s/).length;\n      const maxParaLinks = Math.floor(paraWords / 40) - paraLinks;\n      if (isExceptionLanguage || maxParaLinks > 0) {\n        Array.from(p.childNodes)\n        // filter out non text nodes\n          .filter((node) => node.nodeType === Node.TEXT_NODE)\n          .forEach((textNode) => {\n            const matches = [];\n            // find case-insensitive matches inside text node\n            keywords.forEach((item) => {\n              const match = item.regexp.exec(textNode.nodeValue);\n              if (match) {\n                checkAndAddMatch(matches, {\n                  item,\n                  start: match.index,\n                  end: match.index + item.Keyword.length,\n                }, maxParaLinks);\n              }\n            });\n            matches\n            // sort matches by start index descending\n              .sort((a, b) => b.start - a.start)\n            // split text node, insert link with matched text, and add link tracking\n              .forEach(({ item, start, end }) => {\n                const text = textNode.nodeValue;\n                const a = document.createElement('a');\n                a.title = item.Keyword;\n                a.href = item.URL;\n                a.setAttribute('data-origin', 'interlink');\n                a.setAttribute('daa-ll', `${a.title}--interlinks_p_${item.Keyword}`);\n                a.appendChild(document.createTextNode(text.substring(start, end)));\n                p.insertBefore(a, textNode.nextSibling);\n                p.insertBefore(document.createTextNode(text.substring(end)), a.nextSibling);\n                textNode.nodeValue = text.substring(0, start);\n                // remove matched link from interlinks\n                keywords.splice(keywords.indexOf(item), 1);\n              });\n          });\n      }\n    });\n}\n"],
  "mappings": "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",
  "names": []
}
