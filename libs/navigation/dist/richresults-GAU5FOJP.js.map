{
  "version": 3,
  "sources": ["../../features/richresults.js"],
  "sourcesContent": ["function getRichResultsForArticle(type, getMetadata) {\n  return {\n    '@context': 'https://schema.org',\n    '@type': type,\n    headLine: getMetadata('og:title'),\n    image: getMetadata('og:image'),\n    description: getMetadata('description'),\n    datePublished: getMetadata('published'),\n    dateModified: getMetadata('modified'),\n    author: {\n      '@type': 'Person',\n      name: getMetadata('authorname'),\n      url: getMetadata('authorurl'),\n    },\n  };\n}\n\nfunction getRichResultsForSiteSearchBox(getMetadata) {\n  // See specifications at https://developers.google.com/search/docs/appearance/structured-data/sitelinks-searchbox\n  const SEARCH_TERM_STRING = 'search_term_string';\n  const urlTemplate = `${getMetadata('search-url')}?${getMetadata('search-parameter-name')}={${SEARCH_TERM_STRING}}`;\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'WebSite',\n    url: getMetadata('url'),\n    potentialAction: [{\n      '@type': 'SearchAction',\n      target: {\n        '@type': 'EntryPoint',\n        urlTemplate,\n      },\n      'query-input': `required name=${SEARCH_TERM_STRING}`,\n    }],\n  };\n}\n\nfunction getRichResultsForOrgLogo(getMetadata) {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Organization',\n    url: getMetadata('orgurl'),\n    logo: getMetadata('orglogo'),\n  };\n}\n\nfunction getRichResults(type, getMetadata) {\n  switch (type) {\n    case 'Article':\n    case 'NewsArticle':\n      return getRichResultsForArticle(type, getMetadata);\n    case 'SiteSearchBox':\n      return getRichResultsForSiteSearchBox(getMetadata);\n    case 'Organization':\n      return getRichResultsForOrgLogo(getMetadata);\n    default:\n      // eslint-disable-next-line no-console\n      console.error(`Type ${type} is not supported`);\n      return null;\n  }\n}\n\nfunction addToDom(richResults, createTag) {\n  if (!richResults) {\n    return;\n  }\n  const script = createTag('script', { type: 'application/ld+json' }, JSON.stringify(richResults));\n  document.head.append(script);\n}\n\n// createTag and getMetadata are passed in to avoid circular dependencies\nexport default function addRichResults(type, { createTag, getMetadata }) {\n  const richResults = getRichResults(type, getMetadata);\n  addToDom(richResults, createTag);\n}\n"],
  "mappings": ";;;AAAA,SAAS,yBAAyB,MAAM,aAAa;AACnD,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,UAAU,YAAY,UAAU;AAAA,IAChC,OAAO,YAAY,UAAU;AAAA,IAC7B,aAAa,YAAY,aAAa;AAAA,IACtC,eAAe,YAAY,WAAW;AAAA,IACtC,cAAc,YAAY,UAAU;AAAA,IACpC,QAAQ;AAAA,MACN,SAAS;AAAA,MACT,MAAM,YAAY,YAAY;AAAA,MAC9B,KAAK,YAAY,WAAW;AAAA,IAC9B;AAAA,EACF;AACF;AAEA,SAAS,+BAA+B,aAAa;AAEnD,QAAM,qBAAqB;AAC3B,QAAM,cAAc,GAAG,YAAY,YAAY,CAAC,IAAI,YAAY,uBAAuB,CAAC,KAAK,kBAAkB;AAC/G,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,KAAK,YAAY,KAAK;AAAA,IACtB,iBAAiB,CAAC;AAAA,MAChB,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,SAAS;AAAA,QACT;AAAA,MACF;AAAA,MACA,eAAe,iBAAiB,kBAAkB;AAAA,IACpD,CAAC;AAAA,EACH;AACF;AAEA,SAAS,yBAAyB,aAAa;AAC7C,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,KAAK,YAAY,QAAQ;AAAA,IACzB,MAAM,YAAY,SAAS;AAAA,EAC7B;AACF;AAEA,SAAS,eAAe,MAAM,aAAa;AACzC,UAAQ,MAAM;AAAA,IACZ,KAAK;AAAA,IACL,KAAK;AACH,aAAO,yBAAyB,MAAM,WAAW;AAAA,IACnD,KAAK;AACH,aAAO,+BAA+B,WAAW;AAAA,IACnD,KAAK;AACH,aAAO,yBAAyB,WAAW;AAAA,IAC7C;AAEE,cAAQ,MAAM,QAAQ,IAAI,mBAAmB;AAC7C,aAAO;AAAA,EACX;AACF;AAEA,SAAS,SAAS,aAAa,WAAW;AACxC,MAAI,CAAC,aAAa;AAChB;AAAA,EACF;AACA,QAAM,SAAS,UAAU,UAAU,EAAE,MAAM,sBAAsB,GAAG,KAAK,UAAU,WAAW,CAAC;AAC/F,WAAS,KAAK,OAAO,MAAM;AAC7B;AAGe,SAAR,eAAgC,MAAM,EAAE,WAAW,YAAY,GAAG;AACvE,QAAM,cAAc,eAAe,MAAM,WAAW;AACpD,WAAS,aAAa,SAAS;AACjC;",
  "names": []
}
